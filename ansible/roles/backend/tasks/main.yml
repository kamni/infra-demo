---

###############################################################################
#                                                                             #
#  Installs the setup for the backend server (Django)                         #
#                                                                             #
###############################################################################

# Ansible `apt` commands can only be run from the system python, and won't run
# from inside a virtualenv.  This is a bug (*cough* feature) they refuse
# to fix: https://github.com/ansible/ansible/issues/73075. Combined with other
# installation issues, such as ansible not installing the python3-apt package,
# and `apt` not correctly recognizing the system python3, and other issues
# outside of the scope of this project, we're just going to run this manually
# TODO: get `apt` module working
- name: "Update apt"
  shell:
    cmd: apt-get update
  args:
    # Yes, ansible, we know we're not using the `apt` module
    warn: false
- name: "Install postgres dev libraries, for psycopg2"
  shell:
    cmd: "apt-get install -y {{ item }}"
  with_items:
    - libpq-dev
    - build-essential
  args:
    # Yes, ansible, we know we're not using the `apt` module
    warn: false

- name: "Upgrade pip"
  pip:
    name: pip
    state: latest

- name: "Install project requirements"
  pip:
    chdir: "{{ app_dir }}"
    requirements: "requirements/server.txt"

# TODO: migrations
# TODO: collectstatic
# TODO: do we want to separate these into separate tasks? Or is that overkill?
